THIS RELEASE: Version 2.4.0
---------------------------
- Changed how GtfsProc startup works, now replaces command-line arguments with a configuration
  file since we're also supporting API-key access to Trip Update feeds (and those should stay
  out of your command line history for safety)!
- As mentioned above, real-time trip update feeds that require API keys to access (either as
  URL parameters or HTTP headers) are now supported.
- When using RTF for trips that use the delay-based real-time trip updates, the arr_time and
  dep_time outputs will now display the lateness or earliness in seconds with an L or R
  prefix, respectively (previously, this message would always be "-" so now it is useful).
- Using -l 2 (disabled date matching for real-time trip updates), when the same offset applies
  to multiple service days using POSIX timestamps, only the least-different offset time across
  all the trips on different days will be reflected for NEX/NCF.
- Fixed a bug where trip IDs weren't being used to populate trip IDs skipping stops (also added
  RTD Denver to the test suite as that's where it was discovered).

! A future release (2.5.x) will have to rethink how real-time trips may keep a sequence,
  but technically service different stops (i.e. a different platform than in the schedule
  data). But the requirements for this are being analyzed further.


PREVIOUS RELEASES:
Version 2.3.3
-------------
- Always show the static data feed age when using RTI, cleaned up the Python GUI.

Version 2.3.2
-------------
- Discovered a different case of orphaned trips: real-time trip updates with a valid route
  but the original trip doesn't exist and the trip is not flagged as "ADDED" to the route, these
  will now appear in the orphaned trips and not shown for NEX/NCF.

Version 2.3.1
-------------
* Added a Python+Urwid Text-User-Interface to explore data in a console easier!
  - Head into the python_tui directory and follow setup instructions there.
- Uninitialized fields have been initialized to aid the front-end processing.
- The bug (real-time trip stop sequence matching) mentioned in 2.2.0 should have probably
  been left as-is, due to the problem really being with mismatched agency schedule and
  real-time trip indexes. The "fix" was reverted here so now (-q) is purely stop ID based,
  and when (-q) is not used, it's purely sequence matched, to allow for alternate stops.
- Added the static dataset update time to the RTI response to allow client caching.

Version 2.3.0
-------------
- Extended EES/EER to ETS/ETR, respectively, allowing the requests to handle a current trip and
  destination so it's easier to track the trip you are riding and the rest of your connections
  in real-time!
- Added parent station to SSR responses
- Fixed a bug where boarding trips were disappearing from the arrival displays after 1 minute of
  being stopped at a station (removed unnecessary invalidation logic)

Version 2.2.0
-------------
- Created EES and EER transactions to show arrival and departure times of entire trips with
  connecting routes and specified transfer fimes.
    - EES: End-to-End Service with scheduled and real-time data
    - EER: End-to-End Service with trips using ONLY real-time data
- Added stop ID, route ID, name information to NEX/NCF trip payloads
- Added skip column to real-time trips in the terminal client
- Fixed real-time trip stop sequence matching to also take into effect the stop ID (not just the
  sequence number) because the "-q" option shuold have been evaluated first when doing comparisons.

Version 2.1.1
-------------
- Fixed a wrong order-of-arguments bug in constructing RealTimeTripUpdate objects (trace parameter
  and all-skipped-is-canceled flag were stepping on each other)

Version 2.1.0
-------------
- Created the notion of Override Lists, which are Boolean process flags that (will) allow for the
  altering of "standard" GTFS algorithm processing.
- Created the "ALL_SKIPPED_IS_CANCELED" Override for processing real-time trip updates with only
  skipped stops as canceled trips like the MBTA does for certain bus routes. This flag will operate
  on these trips with-or-without strict date matching as they don't actually put a start date field
  with trips canceled in this manner.
- Added information to SDS transactions to see the algorithms chosen at startup.

Version 2.0.0
-------------
- Debian is the reference platform for GtfsProc, so with the release of Debian 12, which uses Qt 6
  (6.4.2, to be precise), the GtfsProc code has been updated to compile on Qt 6.
- Only compilation errors and any new warnings have been addressed as of this version, so future
  patch releases could (should?) be expected as further testing on upgraded production environments
  is performed.
- Switched to Semantic Versioning going forward. A "major upgrade" (1.x --> 2.x.y) was chosen due to
  the change in versioning scheme, but also because of the underlying Qt upgrade, despite no outward-
  facing functionality was changed. This should also make front-end applications easier to check
  against

Version 1.9
-----------
- Add a new transaction: "TRR" for revealing all real-time (scheduled and added) trip data by
  route ID, specifically vehicle information and where the next stop that vehicle/trip will make.
- Despite the version increment to 1.9, the new transaction has no impact on existing payloads.
- Updated copyright year range for all source files.
- Function and variable renames to make more sense in transaction processing.
- [BUGFIX] Extrapolate "lateness" for offset-based real-time trip updates (i.e. SEPTA Rail) from
  arrival offsets at a stop to that stop's corresponding departure time (if present).

Version 1.8d Technical Update
-----------------------------
- With the release of Debian 11, Qt 5.15.2 is now the reference framework. This release brings about
  any technical changes for a clean compilation against the new libraries but no feature additions
  or bug fixes.

Version 1.8c Fixes
------------------
- Revert the endl/Qt::endl/noforcesign change for Qt 5.15, it is incompatible with Qt 5.12 which
  Debian stable uses

Version 1.8b Features and Fixes
-------------------------------
- Update copyright dates
- Added non-regression test suite
- Canceled trips should not return garbage numbers for schedule offset
- Fixed deprecated feature use (as asserted by Qt 5.15)
- Cleanup some dead code
- Actually increment version number this time

Version 1.8a Features and Fixes
-------------------------------
- Do not force check of stop ID for real-time integration if the -q option is not used, the sequence match
  is sufficient per the specification (ex: Trip departing South Station (MBTA) gets a sub-station 'track'
  assigned: 'South-Station-02' instead of 'South Station' but it retains stop sequence 1).

Version 1.8 Features/Fixes
--------------------------
- Use seconds instead of milliseconds for uptime display in SDS and RPS
- Fix agency_id to be a string in the RTE response (was previously a int by mistake)

Version 1.7 Features/Fixes
--------------------------
This is a major bugfix/feature release specifically focused at GTFS-Realtime processing
 - New RPS module - allows for monitoring of the status of integrated real-time trip updates from a
   transit agency, including such parameters as:
    + Mismatching trips (where sequences or stop IDs are found that were not in the schedule)
    + Duplicate trips in the feed and their indexes
    + Orphaned trips that have no route associated
    + Buffer status / integration / download times
    + Number of scheduled vs. added/supplemental vs. canceled trips
 - If real-time data was empty, don't return a QDateTime of 0, it should be NULL ("-" in output)
 - RDS was not using the agency timezone, this has been fixed
 - Real-time trip update acqusition has a looser (+1 second) enforcement of the check to account for
   operating system thread scheduling decisions (this ensures the updates are not delayed by an additional
   10 seconds anymore)
 - RTI now returns the details of duplicate trip updates, mismatching trip updates, and orphaned trips
 - RTR has been replaced with:
    + RTS - show real-time trip predictions, reconciled with the actual trip schedule
    + RTF - show the real-time trip predictions how they exist in the feed (added trips will always use this)
    + RTT - show the real-time predictions at the entity index from the feed (useful for duplicates from RTI)
 - Ensure that when a real-time trip update is matched to a running scheduled trip that the offsets will be
   based on the service date from the scheduled trip and not the actual date (fixes the problems found with
   trips-after-midnight depending on the GtfsProc -l 0/1/2 option chosen.)
    + Using the client_cli program with the pretty-print option will help build a set of regression tests
      against known data/transactions to avoid breaking it in the future!
 - New option: -q --> skips strict checking of stop-id and stop-sequence that rendered CTTransit predictions.
   Previously, checks of the Stop Sequence were done without verifying the Stop ID matched the real-time
   trip updates and static schedule, so trips showed with all sorts of crazy predictions. By using -q, we
   perform matching of real-time trip updates ONLY by Stop ID, even though a Stop Sequence is present.

Version 1.6 Features and Fixes:
-------------------------------
 - The Agent cannot redirect output to /dev/null, if it does, then it seems we lose track of the actual
   GtfsProc Process ID number. As a result, verbose output of transactions and trip updates is done ONLY 
   if "-i" used, otherwise only data load progress and server readiness are displayed in the server output.
 - Don't print the word "version" in SDS output of the "application" field.
 - RTR, when used on schedule-based trips now matches all the updated times to their schedule/sequence, so
   when used on a scheduled trip, you will now see the entire scheduled trip + the predictions and how the
   actual times were rendered (offset-seconds/POSIX timestamp/extrapolated (new output fields created in RTR).
 - Fixed misunderstanding about extrapolated offset times ... this is actually IN the GTFS-Realtime
   specification, so when offsets are available, they should be cascaded to all stops which have no
   predictions available. As a result, the "-e" option is removed as this is now standard behavior.
 - Code cleanup - everything about real-time predictions now goes through the RTR code to simplify maintenance
   this does appear to have a performance penalty on agencies using offset-seconds. For POSIX-time-based
   real-time-trip-updates, an optimization was put in place to jump right to the relevant update for the
   stop ID / sequence requested.

Version 1.5 Features and Fixes:
-------------------------------
 - NEX and NCF responses now share the age of the data used to generate real-time predictions, which
   allows front-ends to share how close-to-reality the predictions may be (or show a warning, etc.)
 - The RDS command renders the age of the dataset relative to the agency time (even if frozen using -f)
 - Cleaned up unused code related to never-materialized frequency-based-trip processing

Version 1.4 Features and Fixes:
-------------------------------
 - New option (-m) for NEX/NCF modules to not show scheduled trips which terminate at the stop
 - New option (-s) to limit the number of trips that show per route in NEX responses to save wasted data
   since front-ends will probably only want to show a fixed number of trips when organizing in such a way
    - The default value is 4 trips per route
 - Removed spurious "NO" in the GtfsProc_Agent.pl script
 - Added the static dataset modification time to NEX and NCF outputs (last-modified time taken from the
   agency.txt file). This will allow front-ends using NEX/NCF to know when new data is available (in
   particular so new route information, colors, names, etc. may be refetched).

Version 1.3 Features and Fixes:
-------------------------------
 - Bug discovered with CT Transit - scheduled trips that have a real time prediction but no scheduled arrival/
   departure time from which to base offsets were flagged as "data missing". As a result, the NEX/NCF responses
   had their "supplemental" field replaced with a more exotic stop_status, which can hold:
    - "FULL" - schedule and predicted times are available and the offset_seconds is valid
   In these stop_status responses, the offset_seconds should not be used as there is nothing to show:
    - "SPLM" - the trip is from the supplemental realtime data
    - "SCHD" - trip is in the realtime feed but has no prediction for the particular stop ID(s) requested
    - "PRED" - arrival/departure time comes only from the realtime feed (predictions) and no
 - When pulling in local trip updates (using -r with a local file at server startup), the 3-minute rule for
   most recent realtime transactions is not enforced (making debugging easier)
 - Documentation spelling fixes

Addendum: Patch Release 1.3a:
-----------------------------
 - In NEX transactions, the route-level organization is lexicographically done by route ID.
   (this means that the route sorting in output will match however the route IDs were defined by agencies)

Addendum: Patch Release 1.3b:
-----------------------------
 - Created "-e" option for allowing the last-known real-time information to "cascade" through the rest of the
   trip (specifically done for SEPTA Rail and RTC Southern Nevada feeds which only have one update per real-
   time trip update. These agencies also do not provide start dates/times in those feeds, so the "-n" option
   was used to test and validate the new feature.)
 - Made included restarting agent less verbose, cleaned up traces, announce runtime command line
 - Added documentation for how to use the -f / --fixedDateTime option for debugging a live feed
 - If an empty real-time-trip-update is retrieved, now the previous update is held until the next refresh
   interval is reached and tried again. This is for CTTransit, where empty feeds are sometimes found.
 - DPRT (Departed) flag will show up for 30 second after departure time or when the real-time trip-update
   is refreshed an no longer shows the stop in question for NEX/NCF transactions. Originally the display of
   departed trips at a stop would persist until a new buffer was retrieved.

Addendum: Patch Release 1.3c:
-----------------------------
 - The -n Boolean option has been replaced with -l and now takes an integer argument:
    + The default is 0, meaning the full service-date is enforced when matching real-time trip updates
    + Using 1 will enforce that the date in real-time trip-update should match the start date-time of the trip
       (this will be useful for RIPTA and CTTransit, who use the actual start time of trips after midnight!)
    + Using 2 will enforce no service or actual date process to a real-time trip update (SEPTA, RTC S. NV)
 - Removed verbose startup parameters, use the single character ones only

Addendum: Patch Release 1.3d:
-----------------------------
 - Fixed regression caused by departure time calculations never showing DEPART status anymore

VERSION 1.2 Features and Fixes:
-------------------------------
 - You can now specify the number of threads to dedicate to GtfsProc at startup (-t option)
 - The word "canceled" is now spelled correctly in DRT responses
 - To make NCF / NEX more efficient, the route details (colors, names, etc.) are moved out of the
   responses (it makes no sense to pull this data for every transaction). Clients should instead
   use RTE upon first connecting to a GtfsProc backend and store that information.
 - Updated the client_cli to no longer try and render route information (NEX no longer sends it)
 - Cleaned up runtime transaction debug output
 - The Lat/Lon station locations should not be stored as doubles, but proper strings
 - INSTALL and Release Notes file added to version control ... trying to make this a more legit project
 - Correct capitalization of "GtfsProc" everywhere
 - The documentation has been moved to a standalone HTML file instead of ODT
 - Client (included command-line) can now render NCF responses
 - Faster lookups are accomplished by using QHash instead of QMap, but this means having to sort output
 - Helper script added to facilitate daily data refresh attempts (gtfsproc_agent.pl)
 - Transaction logging (to standard error) is more cleaned up (QTime serialization in particular)

VERSION 1.1 Features and Fixes:
-------------------------------
 - Updated documentation for all transactions
 - Segmentation fault when not requesting 2 stop IDs for SBS
 - Support Parent Stations in SBS
 - Fix for 11:59:59 bug (-1 seconds-from-local-noon) showing up as a non-existent time.
    (qint32-max is now the undefined time value, this is how it should have been originally!)
 - When no connections have been made for "a while" (3 minutes), stop refreshing realtime data
    until another realtime-based transaction is attempted
 - To better test stuff, make a date / time override input option so the date can be frozen along
   with the input protobuf. This will allow testing of new features in a stable/unchanging environment
    (start gtfsproc with option: -f y,m,d,h,m,s)
 - Feature to use AM/PM instead of 24-hour times (default is 24-hour times) -- "-a" option
    - This requires making more space on the terrible command line interface too... (+2 char everywhere)
    - New format: "Wed 11:59p" vs "Thu 23:59"
 - New module to dump realtime protobuf into JSON text: DRT

Gtfs-Realtime Updates:
 - Returning more information in the RTR command (like the start date infor, etc.) (new grammar outputs!)
 - In realtime data: detection of actual timestamps vs. offsets being present (either are FULLY allowed)
 - If stop sequences are not included, we should match the stop ID being scanned against the static 
    list so that we can see if the trip already passed a stop (this is also expected behavior!)
 - Refactored the duplicate codee in gtfsrealtimefeed.cpp
 - New input option for gtfsproc: "-x" which will serialize gtfs-realtime protobufs everytime they are fetched
    (Should obviously be used with care!)
 - Supplemental trips do not have vehicle information shown in NEX/NCF but it does appear in RTR
 - Performance: nobody will use the number-of-trips view, so maybe it should be killed. This would massively
   boost the response time as well (since we don't need to load everything then sort by arrival time, merely
   append the relevant trips within the lookahead window and then sort the result.
 - Non-authoritarian date range enforcement (for when service date ranges are not valid or expired)

VERSION 1.0:
------------
This should be considered obsolete and functionally unsound.
Only use Version 1.1 and above due to a bad understanding of gtfs-realtime trip_update syntax in 1.0.


MIGHT FIX:
----------
- When a real-time trip terminates after ending its journey early, the data provider typically expunges it.
  Therefore, already-completed trips that did so early, end up showing up again as scheduled (v2 feeds).
  With V1 feeds, the problem is worse because the trip sequence isn't included, so ANY trip leaving early
  will get flagged with MISSING instead of just being removed.
   >> A restructuring would be needed to put a flag on trips that were operating but completed before they
      were supposed to, allowing us to hide them from future NEX uses. 
      !! This would be the ONLY stateful aspect of this software so far, which could introduce strangeness?
      In most public transit, nothing is ever truly "early", but misallocated trips (i.e. several hours early
      due to a mixed-up Trip ID starting?) could leave scheduled trips that will never run after the fact.
      This appears to be a problem even for Google Maps, so it is not clear this can even be handled.
  (!) Verdict for now:  avoid introducing stateful logic between GTFS-Realtime updates (!)


WISH-LIST FEATURES
------------------
- Frequency-based trips are not handled ... this is a pretty big oversight but almost no agencies use them.
   The big challenge is trying to reliably process them with the realtime trips if they ever exist!
    > Actually ... the gtfs-realtime specification specifically handles these trips (read it lol)
      If we understand these trips and how the rt information interlinks, we can design a solution ???

- Some kind of "last trip of the (service) day" feature? --> Might be nice for "getting trapped" worries
    > Of course ... this would only be for the stop(s) requested, so if your return trip is at another stop
      (like a bus stop across the street from where you boarded), you would need to do BOTH stops
