THIS RELEASE: Version 1.3 Features and Fixes:
---------------------------------------------
 - Bug discovered with CT Transit - scheduled trips that have a real time prediction but no scheduled arrival/
   departure time from which to base offsets were flagged as "data missing". As a result, the NEX/NCF responses
   had their "supplemental" field replaced with a more exotic stop_status, which can hold:
    - "FULL" - schedule and predicted times are available and the offset_seconds is valid
   In these stop_status responses, the offset_seconds should not be used as there is nothing to show:
    - "SPLM" - the trip is from the supplemental realtime data
    - "SCHD" - trip is in the realtime feed but has no prediction for the particular stop ID(s) requested
    - "PRED" - arrival/departure time comes only from the realtime feed (predictions) and no
 - When pulling in local trip updates (using -r with a local file at server startup), the 3-minute rule for
   most recent realtime transactions is not enforced (making debugging easier)
 - Documentation spelling fixes

Addendum: Patch Release 1.3a:
-----------------------------
 - In NEX transactions, the route-level organization is lexicographically done by route ID.
   (this means that the route sorting in output will match however the route IDs were defined by agencies)

Addendum: Patch Release 1.3b:
-----------------------------
 - Created "-e" option for allowing the last-known real-time information to "cascade" through the rest of the
   trip (specifically done for SEPTA Rail and RTC Southern Nevada feeds which only have one update per real-
   time trip update. These agencies also do not provide start dates/times in those feeds, so the "-n" option
   was used to test and validate the new feature.)
 - Made included restarting agent less verbose, cleaned up traces, announce runtime command line
 - Added documentation for how to use the -f / --fixedDateTime option for debugging a live feed
 - If an empty real-time-trip-update is retrieved, now the previous update is held until the next refresh
   interval is reached and tried again. This is for CTTransit, where empty feeds are sometimes found.
 - DPRT (Departed) flag will show up for 30 second after departure time or when the real-time trip-update
   is refreshed an no longer shows the stop in question for NEX/NCF transactions. Originally the display of
   departed trips at a stop would persist until a new buffer was retrieved.

Addendum: Patch Release 1.3c:
-----------------------------
 - The -n Boolean option has been replaced with -l and now takes an integer argument:
    + The default is 0, meaning the full service-date is enforced when matching real-time trip updates
    + Using 1 will enforce that the date in real-time trip-update should match the start date-time of the trip
       (this will be useful for RIPTA and CTTransit, who use the actual start time of trips after midnight!)
    + Using 2 will enforce no service or actual date process to a real-time trip update (SEPTA, RTC S. NV)
 - Removed verbose startup parameters, use the single character ones only
 - Fixed regression caused by departure time calculations never showing DEPART status anymore


PREVIOUS RELEASES:

VERSION 1.2 Features and Fixes:
-------------------------------
 - You can now specify the number of threads to dedicate to GtfsProc at startup (-t option)
 - The word "canceled" is now spelled correctly in DRT responses
 - To make NCF / NEX more efficient, the route details (colors, names, etc.) are moved out of the
   responses (it makes no sense to pull this data for every transaction). Clients should instead
   use RTE upon first connecting to a GtfsProc backend and store that information.
 - Updated the client_cli to no longer try and render route information (NEX no longer sends it)
 - Cleaned up runtime transaction debug output
 - The Lat/Lon station locations should not be stored as doubles, but proper strings
 - INSTALL and Release Notes file added to version control ... trying to make this a more legit project
 - Correct capitalization of "GtfsProc" everywhere
 - The documentation has been moved to a standalone HTML file instead of ODT
 - Client (included command-line) can now render NCF responses
 - Faster lookups are accomplished by using QHash instead of QMap, but this means having to sort output
 - Helper script added to facilitate daily data refresh attempts (gtfsproc_agent.pl)
 - Transaction logging (to standard error) is more cleaned up (QTime serialization in particular)

VERSION 1.1 Features and Fixes:
-------------------------------
 - Updated documentation for all transactions
 - Segmentation fault when not requesting 2 stop IDs for SBS
 - Support Parent Stations in SBS
 - Fix for 11:59:59 bug (-1 seconds-from-local-noon) showing up as a non-existent time.
    (qint32-max is now the undefined time value, this is how it should have been originally!)
 - When no connections have been made for "a while" (3 minutes), stop refreshing realtime data
    until another realtime-based transaction is attempted
 - To better test stuff, make a date / time override input option so the date can be frozen along
   with the input protobuf. This will allow testing of new features in a stable/unchanging environment
    (start gtfsproc with option: -f y,m,d,h,m,s)
 - Feature to use AM/PM instead of 24-hour times (default is 24-hour times) -- "-a" option
    - This requires making more space on the terrible command line interface too... (+2 char everywhere)
    - New format: "Wed 11:59p" vs "Thu 23:59"
 - New module to dump realtime protobuf into JSON text: DRT

Gtfs-Realtime Updates:
 - Returning more information in the RTR command (like the start date infor, etc.) (new grammar outputs!)
 - In realtime data: detection of actual timestamps vs. offsets being present (either are FULLY allowed)
 - If stop sequences are not included, we should match the stop ID being scanned against the static 
    list so that we can see if the trip already passed a stop (this is also expected behavior!)
 - Refactored the duplicate codee in gtfsrealtimefeed.cpp
 - New input option for gtfsproc: "-x" which will serialize gtfs-realtime protobufs everytime they are fetched
    (Should obviously be used with care!)
 - Supplemental trips do not have vehicle information shown in NEX/NCF but it does appear in RTR
 - Performance: nobody will use the number-of-trips view, so maybe it should be killed. This would massively
   boost the response time as well (since we don't need to load everything then sort by arrival time, merely
   append the relevant trips within the lookahead window and then sort the result.
 - Non-authoritarian date range enforcement (for when service date ranges are not valid or expired)

VERSION 1.0:
------------
This should be considered obsolete and functionally unsound.
Only use Version 1.1 and above due to a bad understanding of gtfs-realtime trip_update syntax in 1.0.


MIGHT FIX:
----------
- When a real-time trip terminates after ending its journey early, the data provider typically expunges it.
  Therefore, already-completed trips that did so early, end up showing up again as scheduled (v2 feeds).
  With V1 feeds, the problem is worse because the trip sequence isn't included, so ANY trip leaving early
  will get flagged with MISSING instead of just being removed.
   >> A restructuring would be needed to put a flag on trips that were operating but completed before they
      were supposed to, allowing us to hide them from future NEX uses. 
      !! This would be the ONLY stateful aspect of this software so far, which could introduce strangeness?
      In most public transit, nothing is ever truly "early", but misallocated trips (i.e. several hours early
      due to a mixed-up Trip ID starting?) could leave scheduled trips that will never run after the fact.
      This appears to be a problem even for Google Maps, so it is not clear this can even be handled.
  (!) Verdict for now:  avoid introducing stateful logic between GTFS-Realtime updates (!)


WISH-LIST FEATURES
------------------
- Frequency-based trips are not handled ... this is a pretty big oversight but almost no agencies use them.
   The big challenge is trying to reliably process them with the realtime trips if they ever exist!
    > Actually ... the gtfs-realtime specification specifically handles these trips (read it lol)
      If we understand these trips and how the rt information interlinks, we can design a solution ???

- Some kind of "last trip of the (service) day" feature? --> Might be nice for "getting trapped" worries
    > Of course ... this would only be for the stop(s) requested, so if your return trip is at another stop
      (like a bus stop across the street from where you boarded), you would need to do BOTH stops
